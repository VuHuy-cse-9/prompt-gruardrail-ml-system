// Github repo
def app_config_repo = "https://github.com/VuHuy-cse-9/prompt-gruardrail-serving-model.git"
def app_config_branch = 'argocd'

// Helm
def helm_repo = "prompt-gruardrail-serving-model"
def helm_value_file = 'helm/prompt-guardrail/values.yaml'

// Docker image version 
def version = "v1.${BUILD_NUMBER}"

def docker_build_command = "api/."

pipeline {
    agent any

    options{
        // Max number of build logs to keep and days to keep
        buildDiscarder(logRotator(numToKeepStr: '5', daysToKeepStr: '5'))
        // Enable timestamp at each job in the pipeline
        timestamps()
    }

    environment{
        // Docker registry
        docker_registry = "https://index.docker.io/v1/"
        docker_image_name = 'vnminhhuy2001/prompt-guardrail-service'
        docker_credentials_id = '5ed17986-fa3b-4a9d-978d-73601852a852'   

        // Github
        github_credential_id = '8122721f-a588-46cc-b2c7-2a22eb80fc6f'  

    }

    stages {
        // stage('Test') {
        //     agent {
        //         docker {
        //             image 'python:3.12' 
        //         }
        //     }
        //     steps {
        //         script {                    
        //             // Install dependencies into the virtual environment
        //             echo 'Testing model correctness..'
        //             sh 'pip install -r api/requirements.txt && pytest'
        //         }
        //     }
        // }
        stage('Build') {
            steps {
                script {
                    echo 'Building image for deployment..'
                    def dockerImage = docker.build("${docker_image_name}", docker_build_command)

                    echo 'Pushing image to dockerhub..'
                    docker.withRegistry(docker_registry, docker_credentials_id ) {
                        dockerImage.push(version)
                    }
                }
            }
        }
        stage('Update value in helm-chart') {
            steps {
                withCredentials([usernamePassword(
                    credentialsId: "${github_credential_id}", 
                    passwordVariable: 'GIT_USERNAME', 
                    usernameVariable: 'GIT_PASSWORD')]) {
                    sh """#!/bin/bash

                    echo "Updating Helm chart configuration"
                    echo "Password: $GIT_PASSWORD"
                    echo "Username: $GIT_USERNAME"

                    echo "Configuring Git..."
                    git config --global user.email "jenkins@example.com"
                    git config --global user.name "Jenkins CI SA"

                    echo "Cloning repo..."
                    git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/VuHuy-cse-9/prompt-gruardrail-serving-model.git --branch ${app_config_branch}
                    cd ${helm_repo}
                    sed -i 's|  tag: .*|  tag: "${version}"|' ${helm_value_file}
                    
                    echo "Committing changes..."
                    git add ${helm_value_file}
                    git commit -m "Update Helm chart with new image version ${version}"

                    echo "Pushing changes to remote repository..."
                    git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/VuHuy-cse-9/prompt-gruardrail-serving-model.git HEAD:${app_config_branch}

                    echo "Clean up..."
                    cd ..
                    rm -rf ${helm_repo}

                    echo "Helm chart updated successfully with new image version ${version}."
                    """
                }
            }
        }
        
        // stage('Deploy') {
        //     agent {
        //         kubernetes {
        //             containerTemplate {
        //                 name 'helm' // Name of the container to be used for helm upgrade
        //                 image 'quandvrobusto/jenkins:lts-jdk17' // The image containing helm
        //                 alwaysPullImage true // Always pull image in case of using the same tag
        //             }
        //         }
        //     }
        //     steps {
        //         script {
        //             container('helm') {
        //                 sh("./scripts/model-serving.sh")
        //             }
        //         }
        //     }
        // }
    }
}