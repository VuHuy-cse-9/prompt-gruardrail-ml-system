pipeline {
    agent any

    options{
        // Max number of build logs to keep and days to keep
        buildDiscarder(logRotator(numToKeepStr: '5', daysToKeepStr: '5'))
        // Enable timestamp at each job in the pipeline
        timestamps()
    }

    environment{
        registry = 'vnminhhuy2001/prompt-guardrail-service'
        registryCredential = 'docker-hub-credentials'      
    }

    stages {
        stage('Test') {
            // agent {
            //     docker {
            //         image 'python:3.12' 
            //     }
            // }
            steps {
                script {                    
                    // Install dependencies into the virtual environment
                    echo 'Testing model correctness..'
                    // sh 'pip install -r tests/requirements.txt && pytest'
                }
            }
        }
        stage('Build') {
            steps {
                script {
                    echo 'Building image for deployment..'
                    def dockerImage = docker.build("${registry}:${BUILD_NUMBER}", "api")
                    
                    echo 'Pushing image to dockerhub..'
                    docker.withRegistry( '', registryCredential ) {
                        dockerImage.push()
                        dockerImage.push('latest')
                    }
                }
            }
        }
        stage('Deploy') {
            agent {
                kubernetes {
                    containerTemplate {
                        name 'helm' // Name of the container to be used for helm upgrade
                        image 'quandvrobusto/jenkins:lts-jdk17' // The image containing helm
                        alwaysPullImage true // Always pull image in case of using the same tag
                    }
                }
            }
            steps {
                script {
                    container('helm') {
                        sh("./scripts/model-serving.sh")
                    }
                }
            }
        }
    }
}